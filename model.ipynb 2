{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cab8cb19",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2,os\n",
    "data_path = 'dataset/'\n",
    "categories = os.listdir(data_path)\n",
    "# 'cv2' is the OpenCV library for computer vision. 'os' is the library for interacting with the operating system. This code imports these libraries.\n",
    "# 'data_path' is the path where the dataset is located.\n",
    "# 'categories' is a list that stores the names of the subdirectories within the 'data_path' directory.\n",
    "\n",
    "labels = [i for i in range(len(categories))]\n",
    "# 'labels' is a list that assigns numerical labels to each category in 'categories'.\n",
    "\n",
    "label_dict = dict(zip(categories,labels)) #empty dictionary\n",
    "# 'label_dict' is a dictionary that maps categories to their respective numerical labels.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6ac3ecac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n",
      "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\n"
     ]
    }
   ],
   "source": [
    "print(categories)\n",
    "print(labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "78006dd4",
   "metadata": {},
   "outputs": [],
   "source": [
    "img_size_x = 224\n",
    "img_size_y = 224\n",
    "data = []\n",
    "label = []\n",
    "\n",
    "# 'img_size_x' and 'img_size_y' are the desired dimensions for resizing the images. \n",
    "# 'data' and 'label' are lists that will store the resized images and their corresponding labels.\n",
    "\n",
    "for category in categories:\n",
    "    folder_path = os.path.join(data_path, category)\n",
    "    img_names = os.listdir(folder_path)\n",
    "    \n",
    "    # 'folder_path' is the path to the specific category's folder.\n",
    "    # 'img_names' is a list that stores the names of the image files in the current category's folder.\n",
    "        \n",
    "    for img_name in img_names:\n",
    "        img_path = os.path.join(folder_path, img_name)\n",
    "        img = cv2.imread(img_path)\n",
    "        \n",
    "        # 'img_path' is the complete path of the current image.\n",
    "        # 'img' is the image read using OpenCV.\n",
    "        \n",
    "        try:\n",
    "            # Resizing the image to the desired dimensions without converting to grayscale.\n",
    "            resized = cv2.resize(img, (img_size_x, img_size_y))\n",
    "            data.append(resized)\n",
    "            label.append(label_dict[category])\n",
    "            # Appending the image and the label (categorized) into the list (dataset).\n",
    "        except Exception as e:\n",
    "            print('Exception:', e)\n",
    "            # If any exception is raised, the exception will be printed here. And pass to the next image."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ce066456",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "data = np.array(data)/255.0\n",
    "data = np.reshape(data,(data.shape[0],img_size_x,img_size_y,3))\n",
    "# Convert 'data' to a NumPy array, normalize the pixel values, and reshape the array to be suitable for the CNN model.\n",
    "\n",
    "label = np.array(label)\n",
    "# from tensorflow.keras.utils import to_categorical\n",
    "# new_label = to_categorical(label)\n",
    "# # Convert the numerical labels into categorical labels using one-hot encoding."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6e877c92",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4681, 224, 224, 3)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3dc0126f",
   "metadata": {},
   "source": [
    "categorical_crossentropy ( cce ) produces a one-hot array containing the probable match for each category, sparse_categorical_crossentropy ( scce ) produces a category index of the most likely matching category."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1ea8891e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From C:\\Users\\dgoya\\anaconda3\\Lib\\site-packages\\keras\\src\\losses.py:2976: The name tf.losses.sparse_softmax_cross_entropy is deprecated. Please use tf.compat.v1.losses.sparse_softmax_cross_entropy instead.\n",
      "\n",
      "WARNING:tensorflow:From C:\\Users\\dgoya\\anaconda3\\Lib\\site-packages\\keras\\src\\backend.py:873: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n",
      "\n",
      "WARNING:tensorflow:From C:\\Users\\dgoya\\anaconda3\\Lib\\site-packages\\keras\\src\\layers\\pooling\\max_pooling2d.py:161: The name tf.nn.max_pool is deprecated. Please use tf.nn.max_pool2d instead.\n",
      "\n",
      "WARNING:tensorflow:From C:\\Users\\dgoya\\anaconda3\\Lib\\site-packages\\keras\\src\\optimizers\\__init__.py:309: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from keras.models import Sequential\n",
    "from keras.layers import Dense,Activation,Flatten,Dropout\n",
    "from keras.layers import Conv2D,MaxPooling2D\n",
    "from keras.callbacks import ModelCheckpoint\n",
    "# Import necessary modules and functions from Keras for building and training the CNN model.\n",
    "\n",
    "\n",
    "model = Sequential()\n",
    "# Create a sequential model.\n",
    "\n",
    "model.add(Conv2D(32,(3,3),input_shape = data.shape[1:]))  # data.shape[1],data.shape[2],data.shape[3] == (400,400,1)\n",
    "model.add(Activation('relu'))\n",
    "model.add(MaxPooling2D(pool_size = (2,2)))\n",
    "#The first CNN layer followed by Relu and MaxPooling layers\n",
    "\n",
    "model.add(Conv2D(32,(3,3)))\n",
    "model.add(Activation('relu'))\n",
    "model.add(MaxPooling2D(pool_size = (2,2)))\n",
    "#The second convolution layer followed by Relu and MaxPooling layers\n",
    "\n",
    "model.add(Conv2D(32,(3,3)))\n",
    "model.add(Activation('relu'))\n",
    "model.add(MaxPooling2D(pool_size = (2,2)))\n",
    "#The thrid convolution layer followed by Relu and MaxPooling layers\n",
    "\n",
    "model.add(Flatten())\n",
    "#Flatten layer to stack the output convolutions from 3rd convolution layer\n",
    "model.add(Dropout(0.2))\n",
    "\n",
    "model.add(Dense(128,activation = 'relu'))\n",
    "#Dense layer of 128 neurons\n",
    "# Add a fully connected layer with 128 neurons and ReLU activation.\n",
    "\n",
    "model.add(Dropout(0.1))\n",
    "model.add(Dense(64,activation = 'relu'))\n",
    "#Dense layer of 64 neurons\n",
    "# Add another fully connected layer with 64 neurons and ReLU activation.\n",
    "\n",
    "model.add(Dense(26,activation = 'softmax'))\n",
    "# Add the output layer with 26 neurons and sigmoid activation since the problem seems to involve 26 classes.\n",
    "\n",
    "model.compile(loss = 'sparse_categorical_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\n",
    "# Compile the model with binary crossentropy loss and the Adam optimizer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e6291119",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " conv2d (Conv2D)             (None, 222, 222, 32)      896       \n",
      "                                                                 \n",
      " activation (Activation)     (None, 222, 222, 32)      0         \n",
      "                                                                 \n",
      " max_pooling2d (MaxPooling2  (None, 111, 111, 32)      0         \n",
      " D)                                                              \n",
      "                                                                 \n",
      " conv2d_1 (Conv2D)           (None, 109, 109, 32)      9248      \n",
      "                                                                 \n",
      " activation_1 (Activation)   (None, 109, 109, 32)      0         \n",
      "                                                                 \n",
      " max_pooling2d_1 (MaxPoolin  (None, 54, 54, 32)        0         \n",
      " g2D)                                                            \n",
      "                                                                 \n",
      " conv2d_2 (Conv2D)           (None, 52, 52, 32)        9248      \n",
      "                                                                 \n",
      " activation_2 (Activation)   (None, 52, 52, 32)        0         \n",
      "                                                                 \n",
      " max_pooling2d_2 (MaxPoolin  (None, 26, 26, 32)        0         \n",
      " g2D)                                                            \n",
      "                                                                 \n",
      " flatten (Flatten)           (None, 21632)             0         \n",
      "                                                                 \n",
      " dropout (Dropout)           (None, 21632)             0         \n",
      "                                                                 \n",
      " dense (Dense)               (None, 128)               2769024   \n",
      "                                                                 \n",
      " dropout_1 (Dropout)         (None, 128)               0         \n",
      "                                                                 \n",
      " dense_1 (Dense)             (None, 64)                8256      \n",
      "                                                                 \n",
      " dense_2 (Dense)             (None, 26)                1690      \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 2798362 (10.67 MB)\n",
      "Trainable params: 2798362 (10.67 MB)\n",
      "Non-trainable params: 0 (0.00 Byte)\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "86e9ae4b",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "x_train,x_test,y_train,y_test = train_test_split(data,label,test_size=0.1)\n",
    "# Split the data into training and testing sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "fa40ae63",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "WARNING:tensorflow:From C:\\Users\\dgoya\\anaconda3\\Lib\\site-packages\\keras\\src\\utils\\tf_utils.py:492: The name tf.ragged.RaggedTensorValue is deprecated. Please use tf.compat.v1.ragged.RaggedTensorValue instead.\n",
      "\n",
      "WARNING:tensorflow:From C:\\Users\\dgoya\\anaconda3\\Lib\\site-packages\\keras\\src\\engine\\base_layer_utils.py:384: The name tf.executing_eagerly_outside_functions is deprecated. Please use tf.compat.v1.executing_eagerly_outside_functions instead.\n",
      "\n",
      "106/106 [==============================] - 88s 777ms/step - loss: 1.7468 - accuracy: 0.4927 - val_loss: 0.2238 - val_accuracy: 0.9395\n",
      "Epoch 2/10\n",
      "106/106 [==============================] - 75s 708ms/step - loss: 0.2552 - accuracy: 0.9273 - val_loss: 0.1450 - val_accuracy: 0.9656\n",
      "Epoch 3/10\n",
      "106/106 [==============================] - 76s 720ms/step - loss: 0.1024 - accuracy: 0.9694 - val_loss: 0.0723 - val_accuracy: 0.9751\n",
      "Epoch 4/10\n",
      "106/106 [==============================] - 72s 682ms/step - loss: 0.0710 - accuracy: 0.9780 - val_loss: 0.0526 - val_accuracy: 0.9858\n",
      "Epoch 5/10\n",
      "106/106 [==============================] - 75s 703ms/step - loss: 0.0596 - accuracy: 0.9846 - val_loss: 0.0312 - val_accuracy: 0.9929\n",
      "Epoch 6/10\n",
      "106/106 [==============================] - 75s 703ms/step - loss: 0.0469 - accuracy: 0.9860 - val_loss: 0.0463 - val_accuracy: 0.9893\n",
      "Epoch 7/10\n",
      "106/106 [==============================] - 74s 700ms/step - loss: 0.0256 - accuracy: 0.9911 - val_loss: 0.0315 - val_accuracy: 0.9917\n",
      "Epoch 8/10\n",
      "106/106 [==============================] - 74s 697ms/step - loss: 0.0204 - accuracy: 0.9914 - val_loss: 0.0273 - val_accuracy: 0.9929\n",
      "Epoch 9/10\n",
      "106/106 [==============================] - 75s 711ms/step - loss: 0.0281 - accuracy: 0.9920 - val_loss: 0.0349 - val_accuracy: 0.9917\n",
      "Epoch 10/10\n",
      "106/106 [==============================] - 87s 825ms/step - loss: 0.0306 - accuracy: 0.9893 - val_loss: 0.0762 - val_accuracy: 0.9822\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(x_train,y_train,epochs=10,validation_split=0.2)\n",
    "# Train the model using the training data, for 10 epochs, with a validation split of 20%."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "573d692e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "# Import the matplotlib library for plotting.\n",
    "\n",
    "# # plot the training loss and accuracy\n",
    "N = 10 #number of epochs\n",
    "plt.style.use(\"ggplot\")\n",
    "plt.figure()\n",
    "plt.plot(np.arange(0, N), history.history[\"loss\"], label=\"train_loss\")\n",
    "plt.plot(np.arange(0, N), history.history[\"val_loss\"], label=\"val_loss\")\n",
    "plt.plot(np.arange(0, N), history.history[\"accuracy\"], label=\"train_acc\")\n",
    "plt.plot(np.arange(0, N), history.history[\"val_accuracy\"], label=\"val_acc\")\n",
    "plt.title(\"Training Loss and Accuracy\")\n",
    "plt.xlabel(\"Epoch #\")\n",
    "plt.ylabel(\"Loss/Accuracy\")\n",
    "plt.legend(loc=\"center right\")\n",
    "plt.savefig(\"CNN_Model\") # Plot and save the training loss and accuracy figures."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5d71fe3d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
